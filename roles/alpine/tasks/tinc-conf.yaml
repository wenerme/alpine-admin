- include_tasks: tinc-preset.yaml

- name: apply tinc conf
  become: true
  lineinfile:
    path: "{{tinc_conf_dir}}/tinc.conf"
    line: '{{item.name}}={{item.value}}'
    regex: '^[^#]*?{{item.name}}(\s|=)'
    state: "{{item.state|default('present')}}"
  loop: "{{tinc_conf}}"
  when: tinc_conf is defined
  notify: "tinc-reload"

- name: apply host conf
  become: true
  lineinfile:
    path: "{{tinc_conf_dir}}/hosts/{{tinc_name}}"
    line: '{{item.name}}={{item.value}}'
    regex: '^[^#]*?{{item.name}}(\s|=)'
    state: "{{item.state|default('present')}}"
  loop: "{{tinc_host_conf}}"
  when: tinc_host_conf is defined
  notify: "tinc-reload"

- name: tinc-up static-address conf
  become: true
  copy:
    dest: "{{tinc_conf_dir}}/tinc-up"
    content: |
      #!/bin/sh
      ifconfig $INTERFACE {{tinc_address|ipaddr('address')}} netmask {{tinc_subnet|default(tinc_address)|ipaddr('netmask')}}
  when: tinc_interface_mode == 'static-address'
  notify: "tinc-reload"

- name: tinc-up bridge conf
  become: true
  copy:
    dest: "{{tinc_conf_dir}}/tinc-up"
    content: |
      #!/bin/sh
      ip li set $INTERFACE {{tinc_bridge_master}}
      ip li set $INTERFACE up
  when: tinc_interface_mode == 'bridge'
  notify: "tinc-reload"

- name: tinc-up empty conf
  become: true
  copy:
    dest: "{{tinc_conf_dir}}/tinc-up"
    content: |
      #!/bin/sh
  when: tinc_interface_mode == 'empty'
  notify: "tinc-reload"

