- include_tasks: ensure-python.yaml

- name: install basic package
  become: true
  apk: 
    name: '{{item}}'
  loop:
  - nano
  - curl
  - shadow
  - bash
  - sudo
  - busybox-extras

- name: setup admin account
  become: true
  user:
    name: admin
    comment: Administrator
    # disabled passwod - need this to ssh login
    password: '*'
    uid: '1000'
    state: present
- name: admin use bash
  become: true
  user:
    name: admin
    shell: /bin/bash
- name: admin as sudoer
  become: true
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^admin'
    line: 'admin ALL=(ALL) NOPASSWD: ALL'

- name: ensure .ssh
  become: true
  become_user: admin
  file:
    path: /home/admin/.ssh
    state: directory
    mode: 0700
- name: copy root authorized_keys to admin
  become: true
  copy:
      dest: /home/admin/.ssh/authorized_keys
      src: /root/.ssh/authorized_keys
      remote_src: yes
      group: admin
      mode: 0600
      owner: admin
  ignore_errors: yes

- name: check admin pubkey {{admin_pubkey_path}}
  delegate_to: localhost
  stat: 
    path: "{{admin_pubkey_path}}"
  register: stat_result
- name: copy operator pub key to admin
  authorized_key:
    user: admin
    state: present
    key: "{{ lookup('file', admin_pubkey_path) }}"
    comment: administrator
  when: stat_result.stat.exists

- name: remove root authorized_keys
  file:
    path: /root/.ssh/authorized_keys
    state: absent

- name: secure ssh
  lineinfile:
    path: /etc/ssh/sshd_config
    line: '{{item.name}} {{item.value}}'
    regex: '^\s*{{item.name}}'
    state: present
    insertbefore: '^\s*Match\s+'
    validate: sshd -T -C user=nobody -f %s
  loop:
  # no root login
  - { name: PermitRootLogin, value: 'no' }
  # no password
  - { name: PasswordAuthentication, value: 'no' }
  - { name: ChallengeResponseAuthentication, value: 'no' }
  - { name: PermitEmptyPasswords, value: 'no' }
  # pubkey only
  - { name: AuthenticationMethods, value: 'publickey' }
  - { name: PubkeyAuthentication, value: 'yes' }
  # some warning
  # - { name: Banner, value: '/etc/issue' }
  # alpine has no pam by default
  # - { name: UsePAM, value: 'no' }
  notify: sshd-restart

- name: setup motd
  copy:
    dest: /etc/motd
    src: files/motd.txt
  when: "'files/motd.txt' is file"
